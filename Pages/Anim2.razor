@page "/RandomLottieAnimations/{animNumber:int}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject NumberingHelper numberingHelper
<PageTitle>Random lottie animations</PageTitle>

<div>
    <div class="playing-container">
        <div class="playing-hero section-container">
            <div class="playing-max-width max-width-container">
                <div class="playing-hero1">
                    <lottie-player class="playing-image" @key=animNumber src="@navigationManager.BaseUri/lottie/@lottieFolderName/(@animNumber).json" speed="1" loop autoplay></lottie-player>
                    <div class="playing-container1">
                        <div class="playing-info">
                            <span class="playing-text">
                                <span>@(numberingHelper.MaxLimit - numberingHelper.NumberOfAnimationPlayed + 1) Animations left!</span>
                                <br />
                            </span>
                        </div>
                        <div class="playing-btn-group">
                            <audio id="sound" src="@navigationManager.BaseUri/sound/correct.mp3" @onended="SoundIsFinished" />
                            <button class="playing-button button" id="soundButton" @onclick="PlaySound" disabled="@IsDisabled">NEXT ANIMATION</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int animNumber { get; set; }
    public bool IsDisabled { get; set; } = false;
    public int NumberOfLotties { get; set; } = 30; // load the number from a folder by reading names TODO
    public string lottieFolderName { get; set; } = "RandomLottieAnimations";

    public void SoundIsFinished()
    {
        IsDisabled = false;
    }

    public async Task PlaySound()
    {
        numberingHelper.LottieAnimList = numberingHelper.LottieAnimList.Where(x => x != animNumber).ToList();
        IsDisabled = true;
        await JSRuntime.InvokeAsync<string>("PlayAudio", "sound");


        Random rnd = new Random();
        int randomIndex = rnd.Next(numberingHelper.LottieAnimList.Count());
        animNumber = numberingHelper.LottieAnimList.ElementAt(randomIndex);
        numberingHelper.NumberOfAnimationPlayed++;
        NavigateToNextAnimation();
    }

    public void NavigateToNextAnimation()
    {
        if (numberingHelper.NumberOfAnimationPlayed - 1 > numberingHelper.MaxLimit || numberingHelper.LottieAnimList.Count() == 1) // if its set to 0 then animNumber index is 0 and its throwing error TODO
        {
            navigationManager.NavigateTo($"{@navigationManager.BaseUri}/");
        }
        else
        {
            navigationManager.NavigateTo($"{lottieFolderName}/{animNumber}");
        }
    }

    protected override void OnInitialized()
    {
        {
            numberingHelper.LottieAnimList = Enumerable.Range(1, NumberOfLotties);
        }
    }
}