@page "/RandomLottieAnimations/{animNumber:int}"
@using System.Net;
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject NumberingHelper numberingHelper
@implements IAsyncDisposable
<PageTitle>Random lottie animations</PageTitle>
<div>
    <div class="playing-container">
        <div class="playing-hero section-container">
            <div class="playing-max-width max-width-container">
                <div class="playing-hero1">
                    <lottie-player style="width: 300px; height: 300px;" @key=animNumber src="@navigationManager.BaseUri/lottie/@lottieFolderName/(@animNumber).json" speed="1" loop autoplay></lottie-player>
                    <div class="playing-container1">
                        <div class="playing-info">
                            <span class="playing-text">
                                <span>@(numberingHelper.MaxLimit - numberingHelper.NumberOfAnimationPlayed + 1) Animations left!</span>
                                <br />
                            </span>
                        </div>
                        <div class="playing-btn-group">
                            <audio id="audioElement" />
                            <button class="playing-button button" id="soundButton" @onclick="PlaySound" disabled="@IsDisabled">NEXT ANIMATION</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int animNumber { get; set; } // Parameter used to store the current animation number
    public bool IsDisabled { get; set; } = false; // Flag to indicate whether the component is disabled or not
    public int NumberOfLotties { get; set; } = 30; // Total number of Lottie animations, initialized to 7.
                                                   // TODO: This number should be loaded from the folder by reading the names of the animations
    public string lottieFolderName { get; set; } = "RandomLottieAnimations"; // Name of the folder where the animations are stored
    IJSObjectReference? jsWrapper { get; set; } // Reference to the JavaScript wrapper
                                                // Method to play the sound of the current animation
    public async Task PlaySound()
    {
        // Remove the current animation number from the list of animation numbers
        numberingHelper.LottieAnimList = numberingHelper.LottieAnimList.Where(x => x != animNumber).ToList();
        // Check if the count of items in LottieAnimList is less than or equal to 1
        if (numberingHelper.LottieAnimList.ToList().Count <= 1)
        {
            // Set the value of LottieAnimList to a range of numbers from 1 to NumberOfLotties
            numberingHelper.LottieAnimList = Enumerable.Range(1, NumberOfLotties);
        }
        // Disable the component
        IsDisabled = true;
        // Invoke the playAudio method of the JavaScript wrapper
        await jsWrapper.InvokeVoidAsync("playAudio");
        // Wait for 1 second
        await Task.Delay(750);
        // Enable the component
        IsDisabled = false;
        // Select a random animation number from the list of animation numbers
        Random rnd = new Random();
        int randomIndex = rnd.Next(numberingHelper.LottieAnimList.Count());
        animNumber = numberingHelper.LottieAnimList.ElementAt(randomIndex);
        // Increment the number of animations played
        numberingHelper.NumberOfAnimationPlayed++;
        // Navigate to the next animation
        await NavigateToNextAnimation();
    }
    // Method to navigate to the next animation
    public async Task NavigateToNextAnimation()
    {
        // If the number of animations played is greater than the maximum limit, or if there is only one animation left,
        // navigate to the root page
        if (numberingHelper.NumberOfAnimationPlayed - 1 > numberingHelper.MaxLimit)
        {
            // Dispose the JavaScript wrapper
            await DisposeAsync();
            // TODO: Handle the case where animNumber index is 0, which is causing an error
            navigationManager.NavigateTo($"{@navigationManager.BaseUri}/");
        }
        else
        {
            // Otherwise, navigate to the next animation
            navigationManager.NavigateTo($"{lottieFolderName}/{animNumber}");
            await jsWrapper.InvokeVoidAsync("loadAudio");
        }
    }
    // Initialize the LottieAnimList property with a list of integers from 1 to NumberOfLotties
    protected override async Task OnInitializedAsync()
    {
        {
            string pathToSoundJs = $"{navigationManager.BaseUri}/scripts/sound.js";
            jsWrapper = await JSRuntime.InvokeAsync<IJSObjectReference>("import", pathToSoundJs);
            numberingHelper.LottieAnimList = Enumerable.Range(1, NumberOfLotties);
            await jsWrapper.InvokeVoidAsync("loadAudioFirstTime");
        }
    }
    // Method to dispose the audio and dispose the jsWrapper
    public async ValueTask DisposeAsync()
    {
        if (jsWrapper != null)
        {
            //await jsWrapper.InvokeVoidAsync("disposeAudio");
            await jsWrapper.DisposeAsync();
        }
    }
}